name: Build and Push Docker Images

on:
  push:
    branches: ['master', 'develop']
    tags: ['v*.*.*']
  pull_request:
    branches: ['master']
  release:
    types: [published]

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: rehlds-cstrike

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.4.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      # Conditional login to Docker Hub (only when not PR)
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Conditional login to GitHub Container Registry (only when not PR)
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata with multi-registry configuration
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: |
            ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch-based tags for development
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            
            # Semantic versioning for releases (only on tag push)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            
            # Edge tag for main branch
            type=edge,branch=main
            
            # SHA-based tags for traceability
            type=sha,prefix=sha-,format=short
          flavor: |
            latest=auto
          labels: |
            org.opencontainers.image.title=ReHLDS Counter-Strike 1.6 Server
            org.opencontainers.image.description=Counter-Strike 1.6 server using ReHLDS and Docker
            org.opencontainers.image.vendor=dimankiev
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.documentation=${{ github.server_url }}/${{ github.repository }}/blob/main/README.md

      - name: Print generated tags
        run: |
          echo "Generated tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Generated labels:"
          echo "${{ steps.meta.outputs.labels }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"

      # Build and push Docker image
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
          provenance: mode=max
          sbom: true
          
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ steps.meta.outputs.version }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Generate build provenance attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  security-scan:
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Docker Scout security scan
        uses: docker/scout-action@v1
        continue-on-error: true
        with:
          command: cves
          image: ${{ needs.docker.outputs.image-tags }}
          only-severities: critical,high
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
